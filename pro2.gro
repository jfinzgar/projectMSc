include gro
set( "dt", 0.005 ); 
t := 0;

//global conc //
B := 0;
C := 0;
D := 0;
A_Q2 := 0;

	
	//SIGNALS: Q1 diffusion//
Q1 := 0;
diffusion_Q1 := 2;
degradation_Q1 := 0.2;
Q1_signal := signal ( diffusion_Q1, degradation_Q1 ); // This command declares a new signal


	//SIGNALS: Q2 diffusion//
Q2 := 0;
diffusion_Q2 := 2;
degradation_Q2 := 0.2;
Q2_signal := signal ( diffusion_Q2, degradation_Q2 ); // This command declares a new signal



////CONTROL cell/////

program control_cell(control_init) := {
	
//always green//
	gfp := 1000;
	true : { gfp := volume * 100 };
	
//does not divide//
	set("ecoli_growth_rate", 0.0);  // fL/min
	
	
//Ref//
Ref := 2;

//Q1//
	//synthesis of Q1//
	KQ1 := 0.05;
	rate (KQ1 * B) : { Q1 := Q1 + 1};
	rate ( ( 0.4 * Q1 ) ) : { Q1 := Q1 - 1};
	//selected : {message (1, tostring(id) <> "Q1 in CONTROL: " <> tostring(Q1) )}
	
	//Q1 emitting//
	Q1 > 0.01 : { emit_signal (Q1_signal, 100) } ;
	//true : { emit_signal (Q1_signal, 100);  };//signal emitted at every dt interval //signal emission rate??

	
//Q2// absorbing
	absorb_signal ( Q2_signal, 0.5 ); 
	rate ( ( 0.4 * Q2 ) ) : { Q2 := Q2 - 1}; 
	//selected : {message (1, tostring(id) <> "Q2 in control: " <> tostring(get_signal (Q2_signal)) )}	
	

// A:Q2 //
	//producing A:Q2//
	x_r_baseline := 0.1;
	x_r := 2;
	nr := 2;
	Kr := 1;
	x_a_baseline := 0.1;
	x_a := 2;
	nq := 2;
	Kq := 0.1;
	//rate ( (x_r_baseline + (x_r * ( (Kr ^ nr) / ((Kr ^ nr) + (Ref ^ nr)) ))) * (x_a_baseline + (x_a * ( ((get_signal(Q2)) ^ nq) / ((Kq ^ nq) + ((get_signal(Q2)) ^ nq)) ))) ) : { A_Q2 := A_Q2 + 1 };
	rate ( (x_r_baseline + (x_r * ( (Kr ^ nr) / ((Kr ^ nr) + (Ref ^ nr)) ))) * (x_a_baseline + (x_a * ( (Q2 ^ nq) / ((Kq ^ nq) + (Q2 ^ nq)) ))) ) : { A_Q2 := A_Q2 + 1 } ;
	//degradating A:Q2//
	delta_aq2 := 1.4; 
	rate (delta_aq2 * A_Q2) : { A_Q2 := A_Q2 - 1 };
	//selected : {message (1, tostring(id) <> "A_Q2 in CONTROL: " <> tostring(A_Q2) )}
	
//B//
	//producing B//
	x_b_baseline := 0.1;
	x_b := 2;
	nb := 2;
	Kb := 0.5;
	rate (x_b_baseline + (x_b * ((A_Q2 ^ nb)/((Kb ^ nb) +(A_Q2 ^ nb))))) : { B := B + 1 };
	//degradating B//
	delta_B := 1.4; 
	rate (delta_B * B) : { B := B - 1 };
	selected : {message (1, tostring(id) <> "B in CONTROL: " <> tostring(B) )}
	
selected : {message (1, tostring(id) <> "D in CONTROL: " <> tostring(D) )}
};



////TARGET cell////
program target_cell(target_init) := {

//always red//
	rfp := 1000;
	true : { rfp := volume * 100 };
	
//does not divide//
	set("ecoli_growth_rate", 0.0);
	
	
//Q1 absorbing
	absorb_signal ( Q1_signal, 0.5 );
	rate ( ( 0.4 * Q1 ) ) : { Q1 := Q1 - 1}; //???
	//selected : {message (1, tostring(id) <> "Q1 in target: " <> tostring(get_signal (Q1_signal)) )}	

	
//C//
	//producing C//
	x_c_baseline := 0.1;
	x_c := 2;
	nc := 2;
	Kc := 0.015;
	rate (x_c_baseline + (x_c * ((Q1 ^ nc)/((Kc ^ nc) +(Q1 ^ nc))))) : { C := C + 1 };
	
	//degradation C//
	delta_C := 1.4; 
	rate (delta_C * C) : { C := C - 1 };
	
	//selected : {message (1, tostring(id) <> "C in target: " <> tostring(C) )}

//D//
//producing D//
	x_d_baseline := 0.1;
	x_d := 2;
	nd := 2;
	Kd := 0.5;
	rate (x_d_baseline + (x_d * ((Kd ^ nd) / ((Kd ^ nd) + (C ^ nd))))) : { D := D + 1 };
	
	//degradation D//
	delta_D := 1.4; 
	rate (delta_D * D) : { D := D - 1 };
	selected : {message (1, tostring(id) <> "D in target: " <> tostring(D) )}
	
//Q2//
	//synthesis of Q2//
	KQ2 := 0.05;
	rate (KQ2 * D) : { Q2 := Q2 + 1};
	rate ((0.4 * Q2) ) : { Q2 := Q2 - 1};
	//selected : {message (1, tostring(id) <> "Q1 in target: " <> tostring(get_signal(Q1_signal)) )}
	
	//Q2 emitting//
	Q2 > 0.01 : { emit_signal (Q2_signal, 100); } ;
	//true : { emit_signal (Q2_signal, 100); }; //signal emission rate?? //signal emitted at every dt interval 
	//selected : {message (1, tostring(id) <> "Q2 in target: " <> tostring(Q2)) }

};

//output information (e.g. concentrations) for individual cells
	//Target cell output:
	
program output(delta) := {
	needs D;
	needs rfp;
	needs C;
	needs Q2;
	needs Q1;
  p := [ t := 0, s := 0 ];

  true : {
    p.t := p.t + dt,
    p.s := p.s + dt
  }

  p.s >= delta : {
    print ( id, ", ", p.t, ", ", D / volume, ", ", (get_signal(Q1)) / volume, ", ", (get_signal(Q2)) / volume, "\n" ),
    p.s := 0
  }
};


	//Control cell output:
	
program output2(delta) := {
	needs B;
	needs gfp;
	needs A_Q2;
	needs Q2;
	needs Q1;
  r := [ t := 0, s := 0 ];

  true : {
    r.t := r.t + dt,
    r.s := r.s + dt
  }

  r.s >= delta : {
    print ( "green: ", id, ", ", r.t, ", ", D / volume, ", ", (get_signal(Q1)) / volume, ", ", (get_signal(Q2)) / volume, "\n" ),
    r.s := 0
  }
};


//functions for global concentrations //

	//[D]//
fun conc1 L .
	let d := (sumlist L) in  
		[
			conc_d := d / volume
		]
	end;
	
	//[Q1]//
fun conc2 L_Q1 .
let q1 := (sumlist L_Q1) in 
		[
			conc_q1 := (get_signal(Q1_signal)) / volume
		]
	end;
	
	//[Q2]//
fun conc3 L_Q2 .
let q2 := (sumlist L_Q2) in 
		[
			conc_q2 := (get_signal(Q2_signal)) / volume
		]
	end;

	//executes the functions to get the global concentrations//
program main() := {

	t := 0;
	L := {};
	L_Q1 := {};
	L_Q2 := {};
	s := 0;
	stats := [ conc_d := 0];
	stats2 := [ conc_q1 := 0 ];
	stats3 := [ conc_q2 := 0 ];
	s >= 1 : {
		s := 0,
		L := maptocells D end,
		L_Q1 := maptocells Q1 end,
		L_Q2 := maptocells Q2 end,
		stats := conc1 L,
		stats2 := conc2 L_Q1,
		stats3 := conc3 L_Q2,
		print ("t = ", t, ", [D] = ", stats.conc_d, ", [Q1] = ", stats2.conc_q1, ", [Q2] = ", stats3.conc_q2, "\n" )
		//print (t, ", ", stats.conc_d, ", ", stats2.conc_q1, ", ", stats3.conc_q2, "\n" )
		//print (t, ", ", stats.conc_d, "\n")
	}
	
	true : {
		t := t + dt,
		s := s +dt
	}
};

//for specific cell information
program p() := target_cell (1) +  output(1) sharing rfp;
program r() := control_cell (1) +  output2(1) sharing gfp;

//ecoli ( [ x := 50, y := 0 ], program p() );
//ecoli ( [ x := -50, y := 0 ], program r() );



ecoli ( [ x := -50, y := 0 ], program control_cell(1) );
ecoli ( [ x := 50, y := 0 ], program target_cell(1) );


